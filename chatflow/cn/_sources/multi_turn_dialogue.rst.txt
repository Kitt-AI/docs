.. _multi_turn_dialogue:

====================
多轮对话
====================

.. Bootstrap specific class labels

.. role:: text-success
.. role:: text-primary
.. role:: text-info
.. role:: text-warning
.. role:: text-danger

.. role:: bg-success
.. role:: bg-primary
.. role:: bg-info
.. role:: bg-warning
.. role:: bg-danger

.. _KITT.AI: https://kitt.ai
.. _ChatFlow: https://ChatFlow.dueros.baidu.com/
.. _NLU: https://nlu.kitt.ai/

.. contents:: 目录
   :depth: 4

什么是多轮对话
==============
在人机对话中，bot除了明确用户的意图之外，还需要获取多个必要的信息，比如在用户说：“帮我
预订周四下午盛百万的四人位”，用户的意图是“预订餐厅”，但是这件事的完成需要提供时间（周四下午）、
地点（盛百万）、人数（四人）。如果用户说的是：“帮我预订盛百万的位置”，那么bot需要回问用户的
时间和人数等信息。在这个过程中，bot与用户是会有一次或者多次的对话交互的。多轮对话是与一件事情
的处理相对应的。

多轮对话并不一定会表现为多次的对话交互，如果用户一次性提供了充分的信息，那么也不会存在与用户的多次对话交互。

ChatFlow如何实现多轮对话
=========================
从上文对多轮对话的介绍中来看，实现多轮的核心是获取用户某一意图的所有信息，我们可以借助 NLU_ 来识别
出用户语料中的所有intent和entities，然后在ChatFlow中定义用户某一个intent需要包含哪些entities
才能进行处理，如果缺少必要的entities，那么就在ChatFlow中给用户返回询问这一属性的值，直到用户的这一意图
的所有信息都获取到为止。

ChatFlow中可以通过 ``msg.kitt`` 属性来保存在用户在当前对话的上下文信息，我们可以借助这个功能来记录
用户之前已经提供的信息，然后只向用户咨询他还需要提供的信息。

做一个支持多轮对话的bot
=========================

我们来做一个用户缴纳信用卡的多轮场景的bot。

首先我们先定义好用户缴纳信用卡的意图如下：

+----------------------------+--------------------------------------+-----------------------------------------------+
| *intents*                  |Description                           | Sample Utterances                             |
+============================+======================================+===============================================+
| ``pay_credit_card``        |用户缴纳信用卡                        |我想缴纳信用卡                                 |
+----------------------------+--------------------------------------+-----------------------------------------------+
| ``end``                    |用户停止办理了                        |我不想办理了                                   |
+----------------------------+--------------------------------------+-----------------------------------------------+

然后我们定义用户缴纳信用卡需要的信息，即entities如下：

+----------------------------+--------------------------------------+-----------------------------------------------+
| *entity*                   |Description                           | Sample Utterances                             |
+============================+======================================+===============================================+
| ``money:all``              |用户缴纳全额                          |我想缴纳全款                                   |
+----------------------------+--------------------------------------+-----------------------------------------------+
| ``money:min``              |用户缴纳最低                          |我想缴纳最低额                                 |
+----------------------------+--------------------------------------+-----------------------------------------------+
| ``method:online``          |用户在线缴款                          |我通过线上缴款                                 |
+----------------------------+--------------------------------------+-----------------------------------------------+
| ``method:market``          |用户商超缴款                          |我通过商超缴款                                 |
+----------------------------+--------------------------------------+-----------------------------------------------+
| ``method:office``          |用户邮局缴款                          |我通过邮局缴款                                 |
+----------------------------+--------------------------------------+-----------------------------------------------+
| ``pay:card``               |用户想缴纳的信用卡卡名                |我想支付A卡的账单                              |
+----------------------------+--------------------------------------+-----------------------------------------------+

.. note:: 用户缴纳信用卡的多个信息可以出现在同一用户语料中，比如用户可以说“我想在邮局缴纳全款账单”，这样就包含了两个缴纳信用卡账单需要的信息。

.. note:: 相同的entity类型我们加上了统一的前缀，用于识别这是同一类型的entity。

创建NLU项目
---------------

你可以下载 :download:`信用卡缴费 NLU json <../source/_static/json/信用卡缴费-简体-nlu.json>`，然后导入到
NLU_ 中。

你会看到intent的列表如下图：

.. image:: ../source/_static/img/multi_turn_dialogue/nlu_intent.png
   :align: center

entity的列表如下图：

.. image:: ../source/_static/img/multi_turn_dialogue/nlu_entity.png
   :align: center

然后从Deployed->Test Endpoint->Endpoint中复制出当前NLU项目的endpoint，会在下面的ChatFlow的项目
中使用到。


创建ChatFlow项目
-------------------

你可以下载 :download:`信用卡缴费 ChatFlow json <../source/_static/json/多轮对话demo-ChatFlow.json>`，然后导入到 ChatFlow_ 的项目中。

在 **预处理entity** function节点中有如下代码：

    .. code:: javascript

        msg.kitt.payInfo = msg.kitt.payInfo || {};
        let entity = Object.keys(msg.NLU.entities)
            .map(item=>{
                if(item==='pay:card') {
                msg.kitt.payInfo.card = msg.NLU.entities[item];
            }else{
                itemArr = item.split(':');
                msg.kitt.payInfo[itemArr[0]] = itemArr[1];
            }
        });
        let payInfoKeys = Object.keys(msg.kitt.payInfo);
        let allNeedKeys = ['card', 'method', 'money'];
        msg.needKey = allNeedKeys.filter(item=>payInfoKeys.indexOf(item)<0)[0];

        return msg;

这段代码的功能是将NLU识别出来的entity结果通过 ``msg.kitt`` 存储起来，然后计算出
还需要用户提供的信息，即 ``msg.needKey`` ，该节点后面的switch节点中
会根据 ``msg.needKey`` 中的值来判断，向用户发送什么内容，来获取用户其他方面的信息，
比如“您想怎么付款？邮局，商超还是线上缴款？”。

现在你在 **chat** 部分输入：“我想通过邮局为A卡缴纳全款”，我们的bot会输出用户缴纳
信用卡需要的全部信息，如果我们只输入了：“我想缴费”，我们的bot就会依次询问用户：“你想为
哪张卡缴纳”，“你想通过什么方式缴纳”，“你想缴纳多少费用”，最终获取到用户为信用卡付费的全部信息。
