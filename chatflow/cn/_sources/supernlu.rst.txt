.. _supernlu:

====================
多bot大规模应用实操
====================

.. role:: text-success
.. role:: text-primary
.. role:: text-info
.. role:: text-warning
.. role:: text-danger

.. role:: bg-success
.. role:: bg-primary
.. role:: bg-info
.. role:: bg-warning
.. role:: bg-danger

.. _KITT.AI: https://kitt.ai
.. _ChatFlow: https://ChatFlow.dueros.baidu.com/
.. _NLU: https://nlu.kitt.ai/

.. contents:: 目录
  :depth: 4

对话中控：多个NLU vs. 单一NLU
==================================

这一节我们介绍chatbot商用的一个实际例子。我们有一个Super Bot，它有如下子bot：

1. 四个Intent NLU bot，每一个bot都可以进行 **多轮** 对话
2. 一个FAQ bot，这个bot负责 **单轮** 的一问一答

大多数商用系统都遵循这种结构，例如酒店系统：

1. 有一个FAQ bot，负责回答"one shot"常用问题，如"早餐几点？"，"WiFi密码是什么？"
2. 有若干Intent bot，负责子领域的多轮对话，如：

    * 订餐bot （"给307房间送两瓶啤酒"，需要解析意图和实体）
    * 天气查询bot（"明天天气怎么样"）
    * 智能客控bot（"把床头灯调暗一半"）
    * 定时bot（"明早6点叫我起床"）

当一个对话系统出现多个子bot时，可以有两种中控系统决定消息应该如何转发：

1. **Multi NLU**: 使用多个子bot和它们各自的NLU, 消息轮询转发入各个子bot (dry run)，然后中控系统根据子bot的返回信息决定使用哪个bot：

.. figure:: ../source/_static/img/supernlu/superbot-multi-nlu.png
   :alt: Multi NLU
   :align: center

   SuperBot: Multi NLU

2. **Super NLU**: 使用一个单一NLU（SuperNLU），来直接决定消息直接进入到哪个bot：

.. figure:: ../source/_static/img/supernlu/superbot-super-nlu.png
   :alt: Super NLU
   :align: center

   SuperBot: Super NLU


============= ========================================= ====================================
  比较            Multi NLU                                 Super NLU
============= ========================================= ====================================
  NLU配置      每个bot一个NLU，需要轮询                     所有bot训练一个共同NLU
  查询速度      轮询机制在多bot时会较慢                      只查询一个Super NLU，较快
  训练速度      每个子bot单独NLU，没有重复训练                除了子bot有NLU，还需训练SuperNLU
  bot选择      每个子NLU无法直接比较分数，较难选择            每个子NLU可以直接比较分数，分数高胜出
============= ========================================= ====================================

在实际商用中，我们发现，简单系统(子bot少，逻辑简单)使用Multi NLU可以快速部署；复杂系统(子bot多，多轮情况多)
使用Super NLU系统性能更好：一方面选择速度快，另一方面因为联合训练可以更精准选择bot。

.. note:: 对于第一种情况，:ref:`superbot` 一节介绍了如何使用 ``superbot`` 节点简化连接多个子bot的情况。

单一Super NLU训练
==================================

触发意图
-----------

假设每个bot的NLU都有四个意图，这其中应该有一些意图可以"触发"此bot，例如如下客控对话：

1. "把床头灯打开" --> 意图: 开灯, 实体:{灯}
2. "把窗帘拉起来" --> 意图: 开窗帘，实体:{窗帘}
3. "调暗一点"    -->  意图: 调暗，实体：{}（需要根据上下文判断调暗什么）
4. "关闭"    --> 意图：关闭，实体：{} （需要根据上下文判断关闭什么）

如果单独说3（调暗一点）或4（关闭），无法以大概率判断到底是哪个bot应该响应。但是如果说出了1和2，那应该可以判断
需要有客控bot响应。我们把能正确调起某个bot的意图 *集合* 定义为 **触发意图** 。

.. note:: 触发意图不一定是单一意图，它的语料可能包含了很多不同意图的语料集合

Super NLU的训练，也就是将每个bot的触发意图作为一个个单独的意图，合在一起进行训练。

============= ============= ============= =============== ====================================
bot 1 NLU     bot 2 NLU     bot 3 NLU     bot 4 NLU       Super NLU
============= ============= ============= =============== ====================================
触发意图       触发意图       触发意图        触发意图         bot 1 触发意图
意图2         意图2          意图2          意图2            bot 2 触发意图
意图3         意图3          意图3          意图3            bot 3 触发意图
意图4         意图4          意图4          意图4            bot 4 触发意图
============= ============= ============= =============== ====================================

因为是合在一起训练，所以意图输出的分数具备直接可比性。

.. ============= ============= ============= =============== ====================================
   bot 1 NLU     bot 2 NLU     bot 3 NLU     bot 4 NLU       Super NLU
   ============= ============= ============= =============== ====================================
   entry intent  entry intent  entry intent  entry intent    bot 1 entry intent
   intent 2      intent 2      intent 2      intent 2        bot 2 entry intent
   intent 3      intent 3      intent 3      intent 3        bot 3 entry intent
   intent 4      intent 4      intent 4      intent 4        bot 4 entry intent
   ============= ============= ============= =============== ====================================

.. attention:: 因为Super NLU引用了子bot中的触发意图，所以在训练子botNLU和Super NLU时，一份触发意图的
   语聊要加 **两份**： 一份加到子bot的NLU，一份加到Super NLU。

FAQ vs. NLU, 根据分数选择bot
----------------------------------

一般来说，意图Intent NLU对应的bot是 **执行bot** ，而FAQ对应的bot是 **查询bot** 。在实际应用中，FAQ查询bot会比
意图执行bot调起多很多。

Intent NLU bot和FAQ bot之间如何比较选取？一个简单方法是把FAQ的语料也放入Super NLU进行训练：


============= ============= ============= ============= =============== ====================================
FAQ bot       bot 1 NLU     bot 2 NLU     bot 3 NLU     bot 4 NLU       Super NLU
============= ============= ============= ============= =============== ====================================
问答对1        触发意图         触发意图       触发意图        触发意图           FAQ意图
问答对2        意图2           意图2          意图2          意图2            bot 1 触发意图
\.....        意图3           意图3          意图3          意图3            bot 2 触发意图
问答对788      意图4           意图4          意图4          意图4            bot 3 触发意图
问答对789                                                                   bot 4 触发意图
============= ============= ============= ============= =============== ====================================

但是这带来了两个问题：

1. Super NLU对FAQ意图会判断不准（输出分数不会很高）。FAQ和NLU内部用的是完全不同算法。不能用NLU的算法去解决FAQ问题。
2. FAQ一般语料会有很多，加入Super NLU训练后，会因为数据不平衡问题而影响分数输出（下节详述）

所以在实际应用中，我们采取了如下策略：

.. figure:: ../source/_static/img/supernlu/superbot-super-nlu.png
   :alt: Super NLU
   :align: center

   SuperBot: Super NLU, 注意和SuperNLU并行还有一个FAQ Bot

.. code-block:: python

   faq_threshold  = 0.9
   nlu_threshold = {"bot1": 0.6, "bot2": 0.55, "bot3": 0.7, "bot4":0.6}

   nlu_bot = bot with highest score from SuperNLU
   nlu_score = highest score from SuperNLU

   faq_score = score from FAQ bot

   if faq_score >= faq_threshold:
       select FAQ bot
   else if nlu_score >= nlu_threshold[nlu_bot]:
       select nlu_bot
   else:
       default to FAQ bot or "我没有听懂"

在这里，当FAQ Bot的分数输出大于0.9时，我们优先选择FAQ Bot。否则会看Super NLU输出的bot是不是有足够高的分数。如果都
没有的话，可以仍旧返回给FAQ Bot输出一些次佳答案，或干脆回答没有听懂。

全局参数调优
----------------------------------

在上一节中，我们判断bot采用了一些阈值：

.. code-block:: python

   faq_threshold  = 0.9
   nlu_threshold = {"bot1": 0.6, "bot2": 0.55, "bot3": 0.7, "bot4":0.6}

这些阈值应该在一个标准数据集上进行测试优化选出。

采样：平衡和不平衡(balanced vs. imbalanced)
-------------------------------------------------

Bot开发分两个阶段：

1. Bot上线前，没有真实数据，训练数据来自开发者的"创造"，此时为了调试方便可以采用平衡采样。
2. Bot上线后，有真实数据，也可以评估真实数据的分布，此时为了最佳性能可以采用不平衡采样。

比如，一个bot上线后，我们发现80%的对话都是跟FAQ相关。而在剩余20%对话中4个NLU的子bot中，
60%的对话跟bot1有关，30%的对话跟bot2有关。这样在训练Super NLU时，可以采取不平衡采样。

开发+评估流程：上线前 vs. 上线后
==================================

Bot部署最关键的是训练好FAQ和NLU。但是在系统上线前，bot性能好坏完全取决于开发者自己准备的语料。

开发bot的过程完全可以采用软件工程中的敏捷方法：快速试错，持续优化。以下举例一个是我们在实际商用中采用的步骤：

1. 按照Super NLU配置训练好NLU+FAQ系统
2. 系统小规模上线，有规则抽取了3天的实际数据（例如某一周的周一周二周三，或者某连续三个月的每个月第一个周一的数据）
3. 评估既有系统准确率：

===========  ===========  ============  =============
比率          第一天        第二天         第三天
===========  ===========  ============  =============
FAQ占比         90%          91%           88%
NLU占比         10%           9%           12%
FAQ准确率       85%          86%           85%
NLU准确率       68%          70%           69%
===========  ===========  ============  =============

4. 将第一天识别错误的数据加入FAQ/NLU/Super NLU进行重新训练，再次测试：

===========  =============  ==============  =============
比率          第一天(训练)     第二天            第三天
===========  =============  ==============  =============
FAQ准确率       98%              88%           87%
NLU准确率       95%              75%           74%
===========  =============  ==============  =============

经过一次训练后，在第二天和第三天的未知数据上，我们达到了88%/87%的FAQ准确率，75%/74%的NLU准确率。

5. 将第二天识别错误的数据加入FAQ/NLU/Super NLU进行重新训练，再次测试：

===========  =============  ==============  =============
比率          第一天(训练)    第二天(训练)      第三天
===========  =============  ==============  =============
FAQ准确率       98%            98%               90%
NLU准确率       95%            96%               85%
===========  =============  ==============  =============

经过两次训练后，在第三天的未知数据上，我们达到了90%的FAQ准确率，85%的NLU准确率。

视频教程
----------------

.. raw:: html

   <iframe width="640" height="360" src="https://www.youtube.com/embed/XAQTbGg4SIo"
       frameborder="0" allowfullscreen></iframe>
   <br> <br> <br>


.. raw:: html

   <iframe width="640" height="360" src="https://www.youtube.com/embed/r5yiwJGT1MI"
       frameborder="0" allowfullscreen></iframe>
   <br> <br> <br>


未来补充
================

当前bot
----------------

回归测试
----------------

版本控制
----------------


