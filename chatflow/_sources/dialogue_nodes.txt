.. _dialogue_nodes:

==================
Dialogue Nodes
==================

.. Bootstrap specific class labels

.. role:: text-success
.. role:: text-primary
.. role:: text-info
.. role:: text-warning
.. role:: text-danger

.. role:: bg-success
.. role:: bg-primary
.. role:: bg-info
.. role:: bg-warning
.. role:: bg-danger

Nodes in ChatFlow
==================

.. ChatFlow is built on top of `Node-RED <http://nodered.org>`_, and it inherits from it much of the basic message flow paradigm.
   
ChatFlow conversational content is represented as nodes in a network, and
the links, or wires, between these nodes. Nodes have inputs, where they receive
messages, and outputs, where they send messages. Execution of the
network, or running the conversation, happens through the flow of
messages among the nodes in the network.

Basic Flow, Input and Output
-----------------------

In a ChatFlow conversation, messages typically originate in an input
node from the **bots** section of the node palette. For example,
*Alexa In*, *Cortana In*, and *Slack Bot In* nodes are available to 
create and send messages based on user input coming from 
Amazon Echo, Microsoft Cortana or Slack. These input nodes do not
receive messages from other nodes, so you will notice they do not
accept incoming wires.

Once an input node receives user input (e.g. from Slack, from the chat
tab within ChatFlow, from an Amazon Echo device, etc.), it sends out a message
through its output. The message created by an input node will contain
a ``payload`` property that holds a string corresponding to the 
user natural language input. Through a wire originating at the input node,
this message typically goes to a **Natural Language Understanding (NLU)**
node, which maps the natural language input into symbols that drive
the ChatFlow interaction. The NLU results are added to the message as
a property called ``NLU``, and in a typically flow the message is then
sent through a wire to the **router** node.

The router node then directs the message through a network of **enter** nodes
and **state** nodes, which are not connected to the router by wires.
This process, described in the more detail under the router section of 
the documentation, generates a system utterance, which the router 
places in its outgoing message as a string in the ``payload`` property. The router then sends
the message out through a wire, which is typically connected to an
output node matching the input node used, i.e., text is sent to Slack, or
an Amazon Echo, etc. 

The basic node types used in most ChatFlow conversations are:

input
  An input node generates a message based on external user input,
  which is usually a natural language utterance. The string corresponding
  to the user input is accessible in the message sent by the input node
  as ``msg.payload``.

output
  An output node receives a message containing a system utterance
  as a string in ``msg.payload``. This utterance is what the system
  wants to say to the user, and the output node sends this string out to
  the appropriate output channel.

enter
  An enter node acts as an entry point to a specific part of the conversation.
  Each entry node contains a set of *entrance conditions*, which must all
  be satisfied in order for the conversation to proceed according to the 
  content linked from the entry node. Entry nodes receive messages exclusively
  from the router, which chooses what entry nodes to send messages to.
  Once an entry node receives a message, it sends the message out through
  its output wire.

state
  State nodes define what the agent does, says, and how the conversational
  context is updated. Context is kept as user variables that can be accessed 
  in messages. System output, or agent utterances, are also set in state nodes.
  State nodes can contain arbitrary JavaScript code to manipulate the context
  and messages in general.

NLU
  Having a Natural Language Understanding (NLU) node is crucial to allow a
  conversational agent deal with the unbounded variety of natural language input.
  NLU nodes essentially map natural language input utterances into a set
  of symbols that can be manipulated by the rest of the conversational flow.

Router
======================

The router node is of central importance in ChatFlow, since it is responsible
for choosing what system actions to perform in each conversational turn.
The choices presented to the router are the enter nodes available. The router
will only consider enter nodes with entrance conditions that are satisfied at
that point in the conversation. Of these viable enter nodes, the router will
choose one based on the following criteria:

1. An enter node marked as an initial state will be chosen when the router receives its first message in the current conversation. More than one node may be marked as an initial state, and these will be ranked according the rest of the criteria.

2. Enter nodes that satisfy an explicit ordering preference will be chosen if possible. See the section on enter nodes below for more on specific ordering constraints for enter nodes.

3. Enter nodes with entrance conditions based on ``msg.NLU`` have priority over enter nodes, to ensure that the system is responsive to user input.

4. Enter nodes with precise conditions (i.e. checking for equality) are preferred over nodes with other conditions (e.g. greater than, is not null, regex matching). When multiple entrance conditions are present, nodes with a greater number of precise conditions (equality) are preferred.

Once a router receives a message, it selects an enter node. If none are
eligible, the router sends out a message via output wire. If an enter node
receives a message from the router, it will pass that message through its own
output wire. If the message reaches a **state** node with *no output wires*, 
the state node sends its message back to the router. In other words, **enter**
nodes and **state** nodes are the entry and exit points that the router has
to and from the author-defined conversational content. This conversational 
content consists of enter nodes, state nodes, and any other nodes
available. For example, it may include a Yelp node, which is a wrapper to the 
Yelp developer API, as in the example provided later in this documentation.

.. admonition:: NLU results are only available to the first enter node chosen by the router in each conversational turn

   In each conversational turn, the system may use several enter nodes to build a system response.
   Once the router receives user input and the corresponding labeling from an NLU node, the router
   will prefer to choose an enter containing one or more entrance conditions involving ``msg.NLU``,
   with the goal of being responsive to user input. Only the first enter node chosen by the router has
   access to the NLU results in ``msg.NLU``,  whether or not it contained a ``msg.NLU`` entrance condition.
   The enter node will pass its message with the ``NLU`` property to subsequent nodes connected to it
   by wires, but once the message is sent back to the router by a state node, the ``NLU`` property will
   be deleted. This ensures that the router will not keep responding to the same NLU event multiple
   times. Of course, the intent and entities in the NLU results can be saved explicitly in user
   variables (e.g.  ``msg.kitt.destination = msg.NLU.entities.destination``, or
   ``msg.kitt.current_intent = msg.NLU.intent``, see the NLU section below for details about the
   structure of the ``NLU`` property in ``msg``) while the ``NLU`` property is still in the message.


Enter Nodes
===================

Enter nodes are the router's entry point into conversational content, which is typically a collection of networks, each bookended by an enter node (the entry point) and a state node (the exit point for the network). In between the enter node and the state node, there may be other state nodes and other Node-RED nodes, such as function nodes. All of the inter-node communication that happens between the enter node, which receives messages from the router, and the last state node, which sends messages back to the router, happen through wires, following Node-RED's usual message flow. 

Ordering preferences
------------------------

Note, however, that the output of a state node can be wired to the input of an enter node, but once that connection is made, the resulting connection is not a wire in the Node-RED sense, and is shown on the screen as a dashed line, unlike wires that are shown as solid lines. This dashed line does not represent a wire over which messages can be sent, and rather an *ordering preference*, which says that the enter node should be preferred by the router immediately after the router receives a message from the state node. In other words, a sequence of state node and enter node (in that order), connected by a dashed line, does not mean that the state node has an outgoing wire, and it does not mean that the enter node has an incoming wire. That state node will still send its message to the router, and the enter node will still get its message from the router. The dashed line simply means that once that state node is executed and sends its message to the router, the router will choose the enter node, provided that the enter node's entrance conditions are satisfied. 

An example of a dashed line representing an ordering preference for an enter node following a state node is shown in the image below.

.. image:: images/enternode-orderingpref.png
   :height: 100px
   :align: right
   :alt: Ordering preference for an enter node following a state node

In this example, the router will choose one of the enter nodes *U: accept* or *U: reject* immediately after receiving a message from state node *confirm choice*. For example, if the entrance conditions of the enter node *U: accept* are met, it will be chosen by the router, even if another node with identical entrance conditions exist, and even if another node with more precise entrance conditions that are satisfied exists.

Direct link
--------------------------------

Each enter node includes a checkbox that says *Enter only from direct link*. The *direct link* in this case is the ordering preference described above. If that box is checked for an enter node, that enter node will only be chosen by the router immediately following the state node where the dashed line (ordering preference) originates. It will never be used otherwise. This is useful for state nodes that only make sense in a specific context.


State Nodes
===================

State nodes update the conversational context and define the actions of the agent, including what it says to the user. Each state node includes a code editor where arbitrary JavaScript code can be added. This code will run any time the state node receives a message. The entire message object can be accessed within the state node through the object ``msg``.
.. in a similar way to how `function nodes in Node-RED<http://nodered.org/docs/writing-functions.html>`_ work.
In addition,
.. to functionality similar to Node-RED function nodes
state nodes also include a field where a system utterance can be added. Whenever the state node receives a message, its utterance is added to what the system will say to the user in the current conversational turn.

The two most basic uses of state nodes are:

1. Adding system utterances to the conversational turn, or, in other words, defining what the system will say.

2. Updating user variables, which may comprise a substantial portion of the conversational state. In our quickstart example, the variable ``count`` was an user variable defined and updated in state nodes.

User variables exist in a property of the message called ``kitt``. Unlike other properties of the message ``msg``, all of the user variables in ``kitt`` persist throughout the entire interaction. This is a key difference between user variables and other properties of ``msg``.  Whenever an enter node receives a message, all of the user variables are available in ``msg.kitt``, and these variables can be used in entrance conditions.

Final state
----------------

State nodes include a checkbox that says *Dialogue ends here*. If that box is checked in a specific state node, whenever that state node is executed (i.e. whenever it receives a message and its code runs), the conversation ends, and the state of the router is reset, including deletion of all user variables.

NLU
===================

Natural Language Understanding nodes are designed to map user utterances in natural language into a finite vocabulary of symbols. Two sets of symbols comprise the output of the NLU: *intents* and *entities*. Intents are utterance categories that capture the main communicative intent of the input utterance. For example, the intent *agreeing* captures the communicative intent of many utterances, such as "I agree", "yes", "of course", "yes, I agree", "I think so too", etc. (Of course, each of these utterances may have other intents based on context.) The intent vocabulary (or utterance categories) used by the NLU is defined by the content author, and consists of an arbitrary number of arbitrary strings. These intents can be thought of as buckets in which each incoming input utterance will be placed by the NLU node.

In addition to one *intent*, each utterance may contain zero or more *entities*, which are sequences of words in the input utterance that correspond to a category defined by the content author. These categories, like intents, are of arbitrary number and labels. Common examples include *locations*, *names of organizations*, *prices*, etc. Consider, for example, the following utterance: "Please make me a reservation for six people at Matsuhisa at 7 pm." The intent here may be *make_restaurant_reservation*, and the entities may be *party_size* (corresponding to the word "six"), *restaurant_name* (corresponding to the word "Matsuhisa") and *time* (corresponding to "7 pm"). Note that these assignments are made in the context of the current utterance. The word "six" could be a time in a different utterance ("I need a reservation at six"), and it is the job of the NLU to assign the right entities and intents in each utterance.

The internal mechanisms of NLU nodes may vary, but each NLU node must accept input in the form of ``msg.payload``, and produce output that is placed in its outgoing message in ``msg.NLU``. The NLU output should contain a property called ``intent``, which contains a string value corresponding to the input's intent, and a property called ``entities``, which is an object with ``{entity:value}`` pairs, e.g., ``{"restaurant_name": "Matsuhisa", "party_size": "six", "time": "7 pm"}``. In cases where multiple occurrences of the same entity type exist in an utterance, the entity value will be a list, e.g. ``{"participant_name": ["Sue", "Bob", "Mary"], "meeting_location": "room 245"}``.


API Nodes
===================

It is often useful for ChatFlow agents to be able to interact with the external
world. This can be accomplished easily in ChatFlow through the use of nodes
that wrap existing developer APIs for services such as Uber, Yelp, OpenTable,
Fandango, Amazon, etc. The options are almost limitless. ChatFlow includes
a few such nodes pre-built, with more to be added based in part by community
demand. Additionally, abitrary http requrests can be performed using the
**http request** node, so the opportunities to connect with the external
world are endless.
