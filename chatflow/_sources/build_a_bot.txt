.. _build_a_bot:

=============================
ChatFlow Build A Bot Tutorial
=============================

.. Bootstrap specific class labels

.. role:: text-success
.. role:: text-primary
.. role:: text-info
.. role:: text-warning
.. role:: text-danger

.. role:: bg-success
.. role:: bg-primary
.. role:: bg-info
.. role:: bg-warning
.. role:: bg-danger

.. _ChatFlow: https://chatflow.kitt.ai/
.. _NLU: https://nlu.kitt.ai/

.. contents:: Table of Contents
   :depth: 4

Introduction
============

In this ChatFlow_ tutorial, we will walkthrough the process of building a bot
from start to finish. In addition, we will introduce NLU_ - ChatFlow's
**Natural Language Understanding** companion platform.

By the end of this tutorial, you will be able to:
  * create a new project from scratch
  * configure Enter and State Nodes
  * create an NLU_ application.
  * configure the NLU node in ChatFlow_
  * export and import ChatFlow Projects

The final bot should act a like this:

.. raw:: html

   <video width="640"  controls>
     <source src="_static/img/buildabot/BuildABotSample.mp4" type="video/mp4">
     Your browser does not support the video tag.
   </video>
   <br> <br> <br>

.. _walkthrough_video:

Build A Bot Walkthrough Video
=============================

Here is a video walking you through the entire Free Lunch Bot creation process:

.. raw:: html

   <iframe width="640" height="360" src="https://www.youtube.com/embed/t-SHOOCfDrI"
      frameborder="0" allowfullscreen></iframe>
   <br><br><br>

The Free Lunch Bot
==================

1. Creating an App from Scratch
_______________________________

Let's create a simple flow that does a little more than just say hello. Our new
bot will simply ask users for a free lunch. In addition, it will keep count of
how many times it had to ask before getting a free lunch.

1. Click on "Create new app".

.. image:: _static/img/quickstart/CreateNewApp.png
   :align: center


2. Under the "Start with a clean project" section, enter your project name and
   click "Create".

.. image:: _static/img/quickstart/StartFromScratch.png
   :align: center

3. Your bot will appear in your **App List**. Click on the name to enter the
   *Editor*.

.. image:: _static/img/quickstart/AppList.png
   :align: center

4. Once the page loads, you will have an empty *Canvas*, as shown below.

.. image:: _static/img/quickstart/BlankCanvas.png
   :align: center

5. Drag in the **Chat In** and **Chat Out** Nodes.

.. image:: _static/img/buildabot/chatin-chatout.png
   :align: center

2. The Conversational Router
____________________________

1. Drag a **Router** Node onto the empty Canvas. Connect the Chat In, Router, and
   Chat Out nodes like the image below:

.. image:: _static/img/buildabot/router-node.png
      :align: center

.. note:: The Router is responsible for directing messages within our Flow
    producing the conversational agent's output.

.. warning:: In order to function, a project must have a Router!

2. Double-click on the Router Node to name the Router Node.

.. image:: _static/img/buildabot/router-pop-up.png
   :align: center

3. Enter and State Nodes
________________________

Besides the Router Node, we are going to need two other nodes - the **Enter**
and **State** Nodes.

**State** Nodes are used to define what the bot will say. **Enter**
nodes are used to specify **entrance conditions** (the selection criteria that dictate
when a branch in our Flow will be activated).

Enter Node
**********

1. Add an **Enter** Node to the Canvas. Each Enter Node contains a set of
   *entrance conditions* that specify when that specific Enter Node is chosen by
   the Router.

.. image:: _static/img/buildabot/enternode-1.png
   :align: center

2. Double click on the Enter Node to edit.

.. image:: _static/img/buildabot/enternode-popup.png
   :align: center


3. In this pop-up, name the node. Let's call this Enter Node *Initial state*.

4. Below the name field is the **entrance conditions** section. Remove the
   conditions by clicking on the ""X"" to the right of the condition.

.. image:: _static/img/buildabot/highlightedx.png
   :align: center

.. note:: One condition is partially added by default to get you started.

5. Check the box towards the bottom of the pop-up that says *Initial state*.
   This will tell the Router that this Enter Node marks the first branch of
   Flow. You can then attach a :ref:`state_node` to it for initializing
   variables.

.. image:: _static/img/buildabot/initial-state.png
   :align: center

.. _state_node:

State Node
***********

1. Drag a State Node onto Canvas to the right of the Enter Node.

2. Connect the Enter Node and the State Node together. Click on the grey dot on the
   right of the Enter Node. Drag the resulting wire to the left grey dot of the
   State Node.

.. image:: _static/img/buildabot/Intialstate-statenode.png
   :align: center

3. Double click on the new State Node. Name it *Initialize state*.

4. Below the name field, you will find a **code editor**. In the code editor, create
   a single variable called ``count`` that will keep track of how many times our
   bot has asked the user for lunch. The code inside this State Node will be:

   .. code:: javascript

       msg.kitt.count = 1;
       return msg;

.. note:: User variables are passed from node to node in the variable
   ``msg``. In addition, special property ``msg.kitt`` will be persisted
   over sessions so you can track your context over different dialogue turns.
   Our variable in this case is ``msg.kitt.count``.

.. warning:: The code associated with the State Node should end with ``return msg;``.
   Otherwise no message will be outputted, thus halting the conversation.

5. Select the "Request User Input After This Node" option. The bot will wait for
   the users response before proceeding.

6. In the *Output text* field, input *"Hello! Will you please buy me lunch?"*
   Output text is outputted whenever the State Node is activated. The figure
   below shows what your State Node should look like.

.. image:: _static/img/buildabot/initialize-state.png
   :align: center

4. Adding input and output
__________________________

1. Deploy the bot.

.. image:: _static/img/quickstart/deploy.png
   :align: center

2. Open the Chat Tab. Enter *hello* into the input field on the bottom of the
   screen. You should see a system output message from the State Node *Initialize state*.

.. image:: _static/img/buildabot/chat-bubble.png
   :align: center

The "No" Case
*************

If you try to continue, the bot does nothing since the bot has nothing
else to say. Let's now give our bot the ability to handle *yes* and
*no* answers from the user.

1. Add an Enter Node and a State Node. Connect them as before.

2. Edit the Enter Node:

  * Name it *"U: no"*
  * Set its condition to ``Property msg.payload == no``
    .. note:: This simply checks if the user input to the Router coming from the *Chat In* node is "no"

.. image:: _static/img/buildabot/u-no.png
   :align: center

.. note:: By convention, the main output of nodes is placed into ``payload``.
   The user input coming from *Chat In* is stored in ``msg.payload``.

3. Edit the new State Node.

   * Name it *ask again*
   * Add the following code into its body:

    .. code:: javascript

        msg.kitt.count += 1;
        return msg;

4. In the *Output text* field, enter *I must insist. Will you reconsider?* Your
   State Node should look like the one shown below:

.. image:: _static/img/buildabot/ask-again.png
   :align: center

The "Yes" Case
**************

Now that the system understands *no*, let's add another Enter Node and
another State Node to handle *yes*.

1. Add another pair of Enter and State Nodes. Connect them as before.

2. Name the Enter Node *U:yes* and add the entrance condition:

   * ``Property msg.payload == yes``

3. Name the new State Node *thank user*, and leave the code as ``return msg;``

.. note:: Since we don't need the bot to do anything else when it reaches this
    node, ``return msg;`` will simply dump out the raw output of the node.

4. In the *Output text* field, enter *Thank you! Number of times I asked: {{kitt.count}}*.

.. note:: In the *Output text* field, we can access variables stored in ``msg.kitt``
    without the ``msg`` prefix.

5. Check the box that says *Dialogue ends here* to tell the system that the
   conversation is over once we reach this state.

.. image:: _static/img/buildabot/thank-user.png
   :align: center

The figure below shows the  entire conversational network:

.. image:: _static/img/buildabot/complete-flow-1.png
   :align: center

6. Click Deploy and head to the Chat Tab. You should now be able to have a
   simple conversation with the agent as shown below.

.. image:: _static/img/buildabot/chat-bubble-1.png
   :align: center

Unable To Process Case
**********************

Our bot only understands *yes* and *no*, because we only included
case-sensitive tests for *yes* and *no* user input. If we say anything else,
the agent will not response. We can easily create an Enter Node to handle all
other input strings.

1. Add an Enter Node and a State Node to the Canvas. Connect them together.

2. Edit the Enter Node, name is "U: default", and set it's entrance conditions to:
   * ``Property msg.payload is not null``
   * ``Property msg.payload != yes``
   * ``Property msg.payload != no``

.. image:: _static/img/buildabot/u-default.png
   :align: center

3. In the new State Node, change the name to *not understanding*, leave the code
   as ``return msg;``, and add the following text to the *Output field*:
   * *Sorry, I didn't understand what you said. I only understand "yes" and "no".*

.. image:: _static/img/buildabot/not-understanding.png
   :align: center

Now, your bot will always have something to say, whether it understands the
user or not. Your Flow should look like the figure below.

.. image:: _static/img/buildabot/complete-flow-2.png
   :align: center


We can now have interactions like the following using our bot!

.. image:: _static/img/buildabot/chat-bubble-2.png
   :align: center

5. NLU & Dealing with Natural Language Input
____________________________________________

We have built a simple bot that illustrates the basics of creating a bot in
ChatFlow. However, we have yet to address how our bot can understand real
*natural language* utterances. To deal with input in the form of natural language
utterances without restrictions, we will use a **Natural Language Understanding (NLU)**
node. The NLU node will map that utterance into a finite set of intents and
entities, which we can then use in our Enter Nodes as the basis for our *entrance conditions*.

Add an NLU Node
***************

1. Insert the NLU node between our *Chat In* node and out *Router* node.

.. image:: _static/img/buildabot/flow-with-NLU.png
   :align: center

Create and NLU App
******************

2. Go to NLU_, ChatFlow's companion app. Create a new NLU app. Name the application.

3. In the app, click on "Set Up Intents" to expand the "Set Up Intents" drop down.

.. image:: _static/img/buildabot/setup-intents.png
   :align: center

4. Click on add intent.

5. Name the new intent ``positive_response`` and click create.

.. image:: _static/img/buildabot/positive_response.png
   :align: center

6. Under Example of Use, add the following natural language input strings. Feel
   free to include more:

   * Yes
   * yes
   * sure
   * of course
   * you bet!
   * it would be my honor

7. When finished, click on the red "X" on the top right to exit the window.

.. image:: _static/img/buildabot/positive-utterance.png
   :align: center

8. Click on add intent. Name the new intent ``negative_response`` and click create.
   Under Example of Use, add the following natural language input strings. Feel
   free to include more:

    * Nah
    * no
    * No way jose!
    * Never
    * I shall not
    * We are not amused

.. image:: _static/img/buildabot/negative-response.png
   :align: center

9. Once finished adding the ``positive_response`` and ``negative_response`` intents,
   click **TRAIN APPLICATION**, and then **DEPLOY**.

.. image:: _static/img/buildabot/deploy-nlu.png
   :align: center

.. warning:: In order for your NLU model to update and be fully operation, you
    must train your model and deploy it.

10. Test you model in the *"Train the model"* Section. Input a sentence and click
    analyze.

.. image:: _static/img/buildabot/train-the-model.png
   :align: center

11. Once it has completed, check the result. You can correct the result by clicking
    on the blue button and selecting the correct response. When finished, click submit.

.. image:: _static/img/buildabot/submit-response.png
   :align: center

Deploy the NLU App
******************

.. warning:: Before the final deployment, click "TRAIN APPLICATION" to fully
   optimize you NLU app. Afterwards, you will be able to issue RESTful API calls
   to your app.

12. Click on "Show All Apps" in the upper lefthand corner to go back to the NLU
    app list.

13. In you newly created apps bubble, click on Deployment Information.

.. image:: _static/img/buildabot/deployment-information.png
   :align: center

14. Copy the **Deployment Url** onto your clipboard.

.. image:: _static/img/buildabot/deployment-url-expanded.png
   :align: center

Configure the NLU Node
**********************

15. Edit the NLU Node. In the URL field paste the **Deployment URL**.

.. image:: _static/img/buildabot/flow-with-NLU.png
   :align: center

.. note:: The NLU node with store all NLU information in `msg.NLU`. Intents,
    entities and the original utterance will be stored in ``msg.NLU.intent``,
    ``msg.NLU.entities``, and ``msg.NLU.sentence``, respectively.

16. Add ``{{{payload}}}`` to the end of the URL. The final URL will look like this::

      http://api-nlu.kitt.ai/v1/api/900584f4-7360-479c?token=xxx?q={{{payload}}}

.. image:: _static/img/buildabot/NLU-node-payload.png
   :align: center

6. Reconfiguring The Enter Nodes
________________________________

We now have NLU configured for our bot. However, we currently do not using this
information within our bot. In order to do so, we must reconfigure the *U: Yes*
and *U: No* Enter Nodes.

1. Edit the *U: Yes* node. Under the entrance conditions section, remove the
   ``Property msg.payload == yes`` condition.

2. Add a new condition, ``Property msg.NLU.intent == positive_response``.

.. image:: _static/img/buildabot/u-yes-2.png
   :align: center

3. Edit the *U: No* node. Under the entrance conditions section, remove the
   ``Property msg.payload == no`` condition. Add a new condition,
   ``Property msg.NLU.intent == negative_response``.

.. image:: _static/img/buildabot/u-no-2.png
   :align: center

4. When finished, click Deploy.

Go ahead and test you bot! The interactions should go a little like this:

.. raw:: html

   <video width="640"  controls>
     <source src="_static/img/buildabot/BuildABotSample.mp4" type="video/mp4">
     Your browser does not support the video tag.
   </video>
   <br> <br> <br>

Export and Import
=================

You are able to *export* and *import* projects using the **Export**
and **Import JSON** features.

To export, simply click on **Export** in the *ChatFlow Editor* and select whether you
wish to export the project with or without credentials. ChatFlow will export a
JSON file containing the entire Flow.

.. image:: _static/img/buildabot/export.png
   :align: center

To import, simply click on **Import JSON** on the ChatFlow home page and select
the JSON file you wish to import.

.. image:: _static/img/buildabot/import.png
   :align: center

.. warning:: Both ChatFlow and NLU have export and import features. However, ChatFlow
   apps cannot be imported in NLU and NLU apps cannot be imported into ChatFlow.

Feel free to play with the bots template. You can either:

* Download the :download:`ChatFlow json <_static/json/TheFreeLunchBot.json>` of our
  application and import the project using the Import JSON feature on the
  `applications <https://chatflow.kitt.ai/apps>`_ page.

* Use the "Free Lunch" sample application when clicking "CREATE NEW APP" on the
  `applications <https://chatflow.kitt.ai/apps>`_ page.

In addition, download the :download:`NLU json <_static/json/TheFreeLunchBot-nlu.json>`
Use the NLU's import JSON feature to import it as `an NLU application <https://nlu.kitt.ai>`_
and configure it to your ChatFlow App.
